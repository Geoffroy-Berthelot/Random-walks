#ifndef RANDOM_WALK_SIM_BASE	// avoid repeated expansion
#define RANDOM_WALK_SIM_BASE

#include "Walker.hpp"
#include "Lattice.hpp"
#include "Lattice_spiral.hpp" //in case we instanciate a spiral index (2D only)
#include "Lattice_baseconversion.hpp" //in case we instanciate a base-changing index (nD)
#include "Power_law.hpp"
#include "Tools.hpp"
#include "PointND.hpp"
#include "config_types.hpp"
#include <memory>
#include <random>

class FRsim_base {
public:
    FRsim_base(const bigInt, const double,
            const std::shared_ptr<Lattice>, 
            const std::shared_ptr<Walker>);    //Constructor (alternative)
    virtual void run(bigInt &) = 0;  //run the simulation
    virtual ~FRsim_base(); //Distructor
   
protected:
    //Fundamental types:
    const unsigned int L_dim = 2; //dimension of lattice
    
    bigInt n; //number of preys (can be huge) (also: number of nodes in the Lattice)
    const double time_end;  //ending time

    // Engine is set as a member of the class:
    std::mt19937_64 engine; //mersenne_twister_engine (64 bits)
    // "The random numbers generated by mersenne_twister_engine have 
    // a period equivalent to the mersenne number 2(n-1)*w-1" (2^19937 - 1).
    // https://cplusplus.com/reference/random/mersenne_twister_engine/
    
    //Custom types:
    const std::shared_ptr<Walker> W = NULL;
    const std::shared_ptr<Lattice> L = NULL;
};

#endif
